alg: TD3
alg_kwargs:
  tau: 0.005
  policy_noise: 0.1
  target_noise: 0.2
  noise_clip: 0.5
  critic_freq: 1
  actor_freq: 2
  target_freq: 2
  random_steps: 10000

optim: Adam
optim_kwargs:
  lr: 0.0003

network: ActorCriticPolicy
network_kwargs:
  actor_class: ContinuousMLPActor
  actor_kwargs:
    hidden_layers: [256, 256, 256]
    output_act: ["import", "torch.nn", "Tanh"]
  critic_class: ContinuousMLPCritic
  critic_kwargs:
    hidden_layers: [256, 256, 256]
    ensemble_size: 2
  ortho_init: true

env: FetchSlide-v2
env_kwargs:
  height: 64
  width: 64
  render: false

dataset: HindsightReplayBuffer
dataset_kwargs:
  discount: 0.98
  relabel_fraction: 0.6
  strategy: future
  reward_fn: ["import", "research.envs.gym_robotics", "fetch_sparse"]
  nstep: 1
  capacity: 1000000
  fetch_every: 50
  batch_size: 1024

processor: ComposeProcessor
processor_kwargs:
  processors: # Format is List[Tuple(Name, kwargs)]
   -
    - SelectProcessor
    - obs_include:
      - observation
      - desired_goal
   -
    - ConcatenateProcessor
    -

checkpoint: null # A checkpoint to initialize the network from.

trainer_kwargs: # Arguments given to Algorithm.train
  total_steps: 5000000 # The total number of steps to train
  log_freq: 500 # How often to log values
  eval_freq: 10000 # How often to run evals
  eval_fn: eval_policy
  eval_kwargs:
    num_ep: 100 # Number of enviornment episodes to run for evaluation
  loss_metric: reward # The validation metric that determines when to save the "best_checkpoint"
  train_dataloader_kwargs:
    num_workers: 0 # Number of dataloader workers.
    batch_size: null
  profile_freq: 500
