alg: GoFar
alg_kwargs:
  tau: 0.05
  target_freq: 20
  discriminator_lambda: 0.01

optim: Adam
optim_kwargs:
  lr: 0.0005

network: GoFarNetwork
network_kwargs:
  discriminator_class: MLPDiscriminator
  discriminator_kwargs:
    act: ["import", "torch.nn", "Tanh"]
  actor_class: ContinuousMLPActor
  actor_kwargs:
    act: ["import", "torch.nn", "ReLU"]
    output_act: ["import", "torch.nn", "Tanh"]
  value_class: MLPValue
  value_kwargs:
    ensemble_size: 1
    act: ["import", "torch.nn", "ReLU"]
  concat_keys: ["observation", "desired_goal"]
  hidden_layers: [256, 256, 256]
  ortho_init: True


# No train env, only eval env
eval_env: HandReach-v0
wrapper: GymSparseRewardWrapper

dataset: WGCSLDataset
dataset_kwargs:
  paths: [paths/to/expert/dataset, path/to/random/dataset]
  percents: [depends-on-experiment]
  discount: 0.98
  reward_fn: ["import", "research.envs.gym_robotics", "negative_hand_sparse"]
  relabel_fraction: 1.0
  batch_size: 512
  nstep: 1
  terminal_threshold: 0.01
  init_obs: True

processor: RunningObservationNormalizer
processor_kwargs:
  paired_keys: ["desired_goal", "achieved_goal"]

schedule: null # A learning rate schedule
checkpoint: null # A checkpoint to initialize the model from

trainer_kwargs: # Arguments given to Algorithm.train
  total_steps: 200000 # GoFar saturates at 20*20*(500 epochs) = 200000k steps
  log_freq: 100 # How often to log values
  eval_freq: 2000 # How often to run evals
  eval_fn: eval_policy
  eval_kwargs:
    num_ep: 20 # Number of enviornment episodes to run for evaluation, or -1 if none should be run.
  loss_metric: reward # The validation metric that determines when to save the "best_checkpoint"
  train_dataloader_kwargs:
    num_workers: 0 # Number of dataloader workers.
    batch_size: null
    collate_fn: null
  profile_freq: 500
  seed: null
