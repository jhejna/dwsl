alg: WGCSL
alg_kwargs:
  tau: 0.05
  target_freq: 20
  beta: 1
  clip_score: 10
  drw: True

optim: Adam
optim_kwargs:
  lr: 0.0005

network: ActorCriticPolicy
network_kwargs:
  actor_class: ContinuousMLPActor
  actor_kwargs:
    output_act: ["import", "torch.nn", "Tanh"]
  critic_class: ContinuousMLPCritic
  critic_kwargs:
    ensemble_size: 1
  hidden_layers: [256, 256, 256]
  act: ["import", "torch.nn", "ReLU"]
  ortho_init: True



# No train env, only eval env
eval_env: FetchPickAndPlace-v1
wrapper: GymSparseRewardWrapper

dataset: HindsightReplayBuffer
dataset_kwargs:
  path: path/to/dataset
  discount: 0.98
  reward_fn: ["import", "research.envs.gym_robotics", "negative_fetch_sparse"]
  relabel_fraction: 1.0
  batch_size: 512
  terminal_threshold: 0.05
  nstep: 1


processor: ComposeProcessor
processor_kwargs:
  processors: # Format is List[Tuple(Name, kwargs)]
   -
    - SelectProcessor
    - obs_include:
      - observation
      - desired_goal
   -
    - RunningObservationNormalizer
    -
   -
    - ConcatenateProcessor
    -
schedule: null # A learning rate schedule
checkpoint: null # A checkpoint to initialize the model from

trainer_kwargs: # Arguments given to Algorithm.train
  total_steps: 200000 # GoFar saturates at 20*20*(500 epochs) = 200000k steps
  log_freq: 100 # How often to log values
  eval_freq: 2000 # How often to run evals
  eval_fn: eval_policy
  eval_kwargs:
    num_ep: 20 # Number of enviornment episodes to run for evaluation, or -1 if none should be run.
  loss_metric: reward # The validation metric that determines when to save the "best_checkpoint"
  train_dataloader_kwargs:
    num_workers: 0 # Number of dataloader workers.
    batch_size: null
    collate_fn: null
  profile_freq: 500
  seed: null
